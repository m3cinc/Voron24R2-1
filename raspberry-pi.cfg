# This file contains an example configuration with RPi as secondary mcu

# See docs/Config_Reference.md for a description of parameters.

# The rpi microcontroller is used as secondary.
# Typically, both the X and Y axes
# are connected to the main micro-controller. The rpi microcontroller is used
# on non time-critical functions such as enclosure sensors, additional fan or
# light sources

[mcu host]
serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None

#[resonnance_tester]
#accel_chip: adxl345
#probe_points:
#	175, 175, 20
	
# Example1: A led strip controlled by the GPIO20 on the RPi
#[output_pin caselight]
#pin: host:gpio20
# You can also write the pin in extended form by specifying
# the reference gpiochip.
#pin: host:gpiochip0/gpio20

#[gcode_macro TOGGLE_CASELIGHT]
#gcode:
#  SET_PIN PIN=caselight VALUE={(not printer['output_pin caselight'].value)|int}

[output_pin beeper]
pin: host:gpio24
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
pwm: False
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
#cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

[gcode_macro m300]
description: Emits and audible beep.
  Usage: M300 [P<duration>] [S<frequency>]
gcode:
  {% set settings = printer.configfile.settings %}
  {% if "output_pin beeper" in printer %}
    {% set P = (params.P|default(100)|int, 0)|max %}
    {% set S = (params.S|default(1000)|int, 1)|max %}
    SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
        settings["output_pin beeper"].scale|default(1.0) * 0.5
      } CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0
  {% else %}
    {action_respond_info(
       "M300 is disabled. To enable create an [output_pin beeper] config.")}
  {% endif %}


# Example2: Using the i2c bus of the RPi to read a sensor
[temperature_sensor BME280_data]
sensor_type: BME280
i2c_address: 118
i2c_mcu: host
i2c_bus: i2c.1
i2c_speed: 400000

[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 BME280_data"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f mbar\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure+42.16,
            sensor.humidity))}

# Example 3:Using a pin on another gpiochip connected to the RPi
# (in this case on an MCP23017)
#[fan]
#pin: host:gpiochip2/gpio7
